from random import randint
from typing import Callable


class Pizza:
    def __init__(self, name: str, size: str):
        if name not in ['Margherita', 'Pepperoni', 'Hawaiian']:
            raise ValueError('This pizza in not in menu!')
        if size not in ['L', 'XL']:
            raise ValueError('This size in not available!')

        self.size = size
        self.name = name

        if name == 'Margherita':
            self.name += ' üßÄ'
            self.ingredients = ['tomato sauce', 'mozzarella', 'tomatoes']

        if name == 'Pepperoni':
            self.name += ' üçï'
            self.ingredients = ['tomato sauce', 'mozzarella', 'pepperoni']

        if name == 'Hawaiian':
            self.name += ' üçç'
            self.ingredients = ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']

    def __str__(self):
        return f'{self.name} ({self.size})'

    def dict(self):
        """–º–µ—Ç–æ–¥ dict() - –≤—ã–≤–æ–¥–∏—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        recipe = {self.name: ', '.join(ingredient for ingredient in self.ingredients)}
        return recipe

    def __eq__(self, other):
        """—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ __eq__() –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∏—Ü—Ü
        (object.__eq__ –≤ Python. –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–∏–ø–æ–≤)"""
        if self.name == other.name and self.size == other.size:
            return True
        else:
            return False


def order(pizza: str, size: str, delivery_flag: bool):
    """–ö–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É, —Ñ–ª–∞–≥ ‚Äì‚Äîdelivery –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–µ —Å –∫—É—Ä—å–µ—Ä–æ–º."""
    if delivery_flag not in [True, False]:
        raise ValueError('Delivery included, true or false')
    ordered_pizza = Pizza(pizza, size)
    print(ordered_pizza)
    if delivery_flag == True:
        return ordered_pizza.__str__() + bake(pizza).__str__() + delivery(pizza).__str__()
    else:
        return ordered_pizza.__str__() + bake(pizza).__str__() + pickup(pizza).__str__()


def menu():
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ–Ω—é"""
    all_pizza = [Pizza('Margherita', 'L'), Pizza('Pepperoni', 'L'), Pizza('Hawaiian', 'L')]
    answer = ''
    for pizza in all_pizza:
        answer += f'- {pizza.name}: ' + ', '.join(ingredient for ingredient in pizza.ingredients) + '\n'
    return answer


def log(example: str):
    """–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è """

    def outer_wrapper(function: Callable) -> Callable:
        def inner_wrapper(*args, **kwargs):
            print(example.replace('{}', f'{randint(10, 1000)}').replace('name', function.__name__))
            function(*args, **kwargs)
        return inner_wrapper
    return outer_wrapper


"""—à–∞–±–ª–æ–Ω—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤—Ä–µ–º—è"""

@log('ü•ß –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {} —Å!')
def bake(pizza: Pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {} —Å!')
def delivery(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {} —Å!')
def pickup(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""


if __name__ == '__main__':
    first_pizza = Pizza('Pepperoni', 'XL')
    second_pizza = Pizza('Margherita', 'L')
    print(first_pizza)
    print(first_pizza.dict())

    print(first_pizza == first_pizza)
    print(first_pizza == second_pizza)

    print(menu())
    order('Pepperoni', 'XL', delivery_flag=True)
    order('Margherita', 'L', delivery_flag=False)
